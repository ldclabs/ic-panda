type AirdropClaimInput = record {
  challenge : text;
  code : text;
  lucky_code : opt text;
};
type AirdropHarvestInput = record { amount : nat };
type AirdropLog = record {
  id : nat;
  ts : nat64;
  lucky_code : text;
  caller : principal;
  amount : nat;
};
type AirdropStateOutput = record {
  lucky_code : opt text;
  claimed : nat;
  claimable : nat;
};
type CaptchaOutput = record { challenge : text; img_base64 : text };
type LuckyDrawInput = record { icp : nat8 };
type LuckyDrawLog = record {
  id : nat;
  ts : nat64;
  caller : principal;
  random : nat64;
  icp_amount : nat;
  amount : nat;
};
type LuckyDrawOutput = record {
  luckypool_empty : bool;
  random : nat64;
  amount : nat;
};
type Notification = record {
  id : nat8;
  level : nat8;
  message : text;
  dismiss : bool;
  timeout : nat16;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : AirdropStateOutput; Err : text };
type Result_2 = variant { Ok : AirdropStateOutput; Err };
type Result_3 = variant { Ok : CaptchaOutput; Err : text };
type Result_4 = variant { Ok : LuckyDrawOutput; Err : text };
type Result_5 = variant { Ok : State; Err };
type Result_6 = variant { Ok : principal; Err };
type State = record {
  latest_luckydraw_logs : vec LuckyDrawLog;
  total_luckydraw : nat64;
  latest_airdrop_logs : vec AirdropLog;
  managers : opt vec principal;
  total_airdrop : nat64;
  total_airdrop_count : nat64;
  luckiest_luckydraw_logs : vec LuckyDrawLog;
  airdrop_balance : nat64;
  total_luckydraw_count : nat64;
  total_luckydraw_icp : nat64;
};
service : () -> {
  admin_collect_icp : (nat) -> (Result);
  admin_set_managers : (vec principal) -> (Result);
  airdrop : (AirdropClaimInput) -> (Result_1);
  airdrop_logs : (opt nat, opt nat) -> (vec AirdropLog) query;
  airdrop_state_of : (opt principal) -> (Result_2) query;
  api_version : () -> (nat16) query;
  captcha : () -> (Result_3);
  harvest : (AirdropHarvestInput) -> (Result_1);
  luckydraw : (LuckyDrawInput) -> (Result_4);
  luckydraw_logs : (opt nat, opt nat) -> (vec LuckyDrawLog) query;
  manager_add_notification : (Notification) -> (Result);
  manager_remove_notifications : (vec nat8) -> (Result);
  manager_update_airdrop_balance : (nat64) -> (Result);
  notifications : () -> (vec Notification) query;
  state : () -> (Result_5) query;
  whoami : () -> (Result_6) query;
}
