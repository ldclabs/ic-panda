type AirdropClaimInput = record { challenge : text; code : text };
type CaptchaOutput = record { challenge : text; img_base64 : text };
type LogsInput = record { index : opt nat64 };
type LogsOutput = record {
  next_index : opt nat64;
  logs : vec record { principal; nat64; nat64 };
};
type LogsOutput_1 = record {
  next_index : opt nat64;
  logs : vec record { principal; nat64; nat64; nat64; nat64 };
};
type LuckyDrawInput = record { icp : nat8 };
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : nat; Err : text };
type Result_2 = variant { Ok : nat; Err };
type Result_3 = variant { Ok : LogsOutput; Err };
type Result_4 = variant { Ok : CaptchaOutput; Err : text };
type Result_5 = variant { Ok : LogsOutput_1; Err };
type Result_6 = variant { Ok : State; Err };
type Result_7 = variant { Ok : principal; Err };
type State = record {
  total_luckydraw : nat64;
  total_airdrop : nat64;
  airdrop_balance : nat64;
  total_luckydraw_count : nat64;
  total_luckydraw_icp : nat64;
};
service : () -> {
  admin_collect_icp : (nat) -> (Result);
  admin_update_airdrop_balance : (nat64) -> ();
  airdrop : (AirdropClaimInput) -> (Result_1);
  airdrop_balance : () -> (Result_2) query;
  airdrop_logs : (LogsInput) -> (Result_3) query;
  airdrop_total : () -> (Result_2) query;
  api_version : () -> (nat16) query;
  captcha : () -> (Result_4);
  luckydraw : (LuckyDrawInput) -> (Result_1);
  luckydraw_logs : (LogsInput) -> (Result_5) query;
  luckydraw_total : () -> (Result_2) query;
  state : () -> (Result_6) query;
  whoami : () -> (Result_7) query;
}
