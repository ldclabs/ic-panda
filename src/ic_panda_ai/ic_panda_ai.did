type BatchOperation = variant {
  CreateAsset : CreateAssetArguments;
  SetAssetContent : SetAssetContentArguments;
};
type ChatInput = record {
  top_p : opt float32;
  challenge : opt blob;
  messages : opt vec text;
  temperature : opt float32;
  max_tokens : opt nat32;
  prompt : text;
};
type ChatOutput = record { tokens : nat32; message : text };
type CommitBatchArguments = record {
  batch_id : nat;
  operations : vec BatchOperation;
};
type CreateAssetArguments = record {
  key : text;
  content_type : text;
  headers : opt vec record { text; text };
  allow_raw_access : opt bool;
  max_age : opt nat64;
  enable_aliasing : opt bool;
};
type CreateBatchResponse = record { batch_id : nat };
type CreateChunkArg = record { content : blob; batch_id : nat; chunk_id : nat };
type CreateChunkResponse = record { chunk_id : nat };
type FileMetadataOutput = record {
  id : nat32;
  updated_at : nat;
  hash : opt blob;
  name : text;
  size : nat32;
  content_type : text;
  created_at : nat;
  filled_size : nat32;
  chunks : nat32;
};
type LoadModelInput = record {
  tokenizer_id : nat32;
  config_id : nat32;
  model_id : nat32;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : ChatOutput; Err : text };
type Result_2 = variant { Ok : FileMetadataOutput; Err : text };
type Result_3 = variant { Ok : State; Err };
type SetAssetContentArguments = record {
  key : text;
  sha256 : opt blob;
  chunk_ids : vec nat;
  content_encoding : text;
};
type State = record {
  managers : vec principal;
  ai_config : nat32;
  ai_model : nat32;
  chat_count : nat64;
  ai_tokenizer : nat32;
  file_id : nat32;
};
type StoreArg = record {
  key : text;
  content : blob;
  sha256 : opt blob;
  content_type : text;
  aliased : opt bool;
  content_encoding : text;
};
service : () -> {
  admin_load_model : (LoadModelInput) -> (Result);
  admin_set_managers : (vec principal) -> (Result);
  api_version : () -> (nat16) query;
  chat : (ChatInput) -> (Result_1);
  commit_batch : (CommitBatchArguments) -> ();
  create_batch : () -> (CreateBatchResponse);
  create_chunk : (CreateChunkArg) -> (CreateChunkResponse);
  delete_batch : (CreateBatchResponse) -> ();
  file_meta : (nat32) -> (Result_2) query;
  files : (opt nat, opt nat) -> (vec FileMetadataOutput) query;
  state : () -> (Result_3) query;
  store : (StoreArg) -> ();
  validate_admin_set_managers : (vec principal) -> (Result);
}
