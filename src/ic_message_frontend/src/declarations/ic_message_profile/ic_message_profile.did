type CanisterKind = variant { OssBucket; OssCluster };
type CanisterStatusResponse = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  query_stats : QueryStats;
  idle_cycles_burned_per_day : nat;
  module_hash : opt blob;
  reserved_cycles : nat;
};
type CanisterStatusType = variant { stopped; stopping; running };
type ChainArgs = variant { Upgrade : UpgradeArgs; Init : InitArgs };
type ChannelSetting = record { pin : nat32; alias : text; tags : vec text };
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  reserved_cycles_limit : nat;
  log_visibility : LogVisibility;
  wasm_memory_limit : nat;
  memory_allocation : nat;
  compute_allocation : nat;
};
type InitArgs = record { managers : vec principal; name : text };
type Link = record { uri : text; title : text; image : opt text };
type LogVisibility = variant {
  controllers;
  public;
  allowed_viewers : vec principal;
};
type ProfileInfo = record {
  id : principal;
  bio : text;
  active_at : nat64;
  created_at : nat64;
  channels : opt vec record { record { principal; nat64 }; ChannelSetting };
  image_file : opt record { principal; nat32 };
  links : vec Link;
  tokens : vec principal;
  canister : principal;
  ecdh_pub : opt blob;
  following : opt vec principal;
};
type QueryStats = record {
  response_payload_bytes_total : nat;
  num_instructions_total : nat;
  num_calls_total : nat;
  request_payload_bytes_total : nat;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : CanisterStatusResponse; Err : text };
type Result_2 = variant { Ok : ProfileInfo; Err : text };
type Result_3 = variant { Ok : StateInfo; Err : text };
type Result_4 = variant { Ok : UploadImageOutput; Err : text };
type Result_5 = variant { Ok : text; Err : text };
type StateInfo = record {
  managers : vec principal;
  profiles_total : nat64;
  name : text;
  ic_oss_cluster : opt principal;
  ic_oss_buckets : vec principal;
};
type UpdateProfileInput = record {
  bio : opt text;
  remove_channels : vec record { principal; nat64 };
  upsert_channels : vec record { record { principal; nat64 }; ChannelSetting };
  follow : vec principal;
  unfollow : vec principal;
};
type UpgradeArgs = record { managers : opt vec principal; name : opt text };
type UploadImageInput = record { size : nat64; content_type : text };
type UploadImageOutput = record {
  name : text;
  image : record { principal; nat32 };
  access_token : blob;
};
service : (opt ChainArgs) -> {
  admin_add_canister : (CanisterKind, principal) -> (Result);
  admin_add_managers : (vec principal) -> (Result);
  admin_remove_managers : (vec principal) -> (Result);
  admin_update_profile_ecdh_pub : (principal, blob) -> (Result);
  admin_upsert_profile : (principal, opt record { principal; nat64 }) -> (
      Result,
    );
  get_canister_status : () -> (Result_1) query;
  get_profile : (opt principal) -> (Result_2) query;
  get_state : () -> (Result_3) query;
  update_links : (vec Link) -> (Result);
  update_profile : (UpdateProfileInput) -> (Result_2);
  update_profile_ecdh_pub : (blob) -> (Result);
  update_tokens : (vec principal) -> (Result);
  upload_image_token : (UploadImageInput) -> (Result_4);
  validate2_admin_add_managers : (vec principal) -> (Result_5);
  validate2_admin_remove_managers : (vec principal) -> (Result_5);
  validate_admin_add_canister : (CanisterKind, principal) -> (Result_5);
  validate_admin_add_managers : (vec principal) -> (Result);
  validate_admin_remove_managers : (vec principal) -> (Result);
}
