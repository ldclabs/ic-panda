type ChainArgs = variant { Upgrade : UpgradeArgs; Init : InitArgs };
type Delegation = record {
  pubkey : blob;
  targets : opt vec principal;
  expiration : nat64;
};
type Delegator = record { owner : principal; role : int8; sign_in_at : nat64 };
type InitArgs = record { session_expires_in_ms : nat64; name : text };
type NameAccount = record { name : text; account : principal };
type Result = variant { Ok : vec Delegator; Err : text };
type Result_1 = variant { Ok; Err : text };
type Result_2 = variant { Ok : SignedDelegation; Err : text };
type Result_3 = variant { Ok : vec NameAccount; Err : text };
type Result_4 = variant { Ok : principal; Err : text };
type Result_5 = variant { Ok : State; Err : text };
type Result_6 = variant { Ok : SignInResponse; Err : text };
type Result_7 = variant { Ok : text; Err : text };
type SignInResponse = record {
  user_key : blob;
  seed : blob;
  expiration : nat64;
};
type SignedDelegation = record { signature : blob; delegation : Delegation };
type State = record {
  session_expires_in_ms : nat64;
  name : text;
  sign_in_count : nat64;
};
type UpgradeArgs = record {
  session_expires_in_ms : opt nat64;
  name : opt text;
};
service : (opt ChainArgs) -> {
  activate_name : (text) -> (Result);
  add_delegator : (text, principal, int8) -> (Result);
  admin_reset_name : (text, vec principal) -> (Result_1);
  get_delegation : (blob, blob, nat64) -> (Result_2) query;
  get_delegators : (text) -> (Result) query;
  get_my_accounts : () -> (Result_3) query;
  get_principal : (text) -> (Result_4) query;
  get_state : () -> (Result_5) query;
  leave_delegation : (text) -> (Result_1);
  remove_delegator : (text, principal) -> (Result_1);
  sign_in : (text, blob, blob) -> (Result_6);
  validate_admin_reset_name : (text, vec principal) -> (Result_7);
  whoami : () -> (Result_4) query;
}
